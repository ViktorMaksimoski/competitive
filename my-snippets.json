{
	"C++ Fast IO ans Bits": {
		"prefix": "cppfib",
		"body": [
		   "#include <bits/stdc++.h>",
		   "",
		   "#define pb push_back",
		   "#define eb emplace_back",
		   "#define sz(x) (int)x.size()",
		   "#define all(x) x.begin(), x.end()",
		   "#define uniq(x) x.erase(unique(all(x)), x.end())",
		   "#define rall(x) x.rbegin(), x.rend()",
		   "//#define int long long",
		   "",
		   "using namespace std;",
		   "",
		   "using ll = long long;",
		   "using ull = unsigned long long;",
		   "using ld = long double;",
		   "using pii = pair<int, int>;",
		   "using pll = pair<ll, ll>;",
		   "",
		   "const int mod = 1e9 + 7;",
		   "const int LOG = 20;",
		   "const int maxn = 1e5 + 5;",
		   "const double eps = 1e-9;",
		   "",
		   "void setIO() {",
		   "    ios_base::sync_with_stdio(false);",
		   "    cin.tie(0);",
		   "    cout.tie(0);",
		   "}",
		   "",
		   "int32_t main() {",
		   "    setIO();",
		   "",
		   "    //code starts here",
		   "",
		   "    return 0;",
		   "}"
		],
		"description": "Log output to console"
   },
   "Fast min": {
	   "prefix": "min",
	   "body": [
		   "min(${0})",
	   ]
   },
   "Fast max": {
	   "prefix": "max",
	   "body": [
		   "max(${0})",
	   ]
   },
   "Fast vector": {
	   "prefix": "vec",
	   "body": [
		   "vector<${0}> v;",
	   ]
   },
   "Fast set": {
	   "prefix": "set",
	   "body": [
		   "set<${0}> s;",
	   ]
   },
   "Fast map": {
	   "prefix": "occ",
	   "body": [
		   "map<int, int> occ;",
	   ],
	   "description": "add map for storing occurances",
   },
   "Fast graph": {
	   "prefix": ["ginput", "graph-input"],
	   "body": [
		   "for(int i=0; i<m; i++) {",
		   "\tint a, b;",
		   "\tcin >> a >> b;",
		   "\tgraph[a].push_back(b);",
		   "\tgraph[b].push_back(a);",
		   "}",
	   ],
	   "description": "input for unweighted bidirectional graph"
   },
   "Fast weighted graph": {
	   "prefix": ["gwinput", "path-input"],
	   "body": [
		   "for(int i=0; i<m; i++) {",
		   "\tint a, b, w;",
		   "\tcin >> a >> b >> w;",
		   "\tgraph[a].push_back({ b, w });",
		   "\tgraph[b].push_back({ a, w });",
		   "}",
	   ],
	   "description": "input for weighted bidirectional graph"
   },
   "Fast sort": {
	   "prefix": "sort",
	   "body": [
		   "sort(all(${0}));"
	   ]
   },
   "Fast DSU": {
	   "prefix": ["getDSU", "struct-dsu", "doDSU"],
	   "body": [
		   "template <class T>",
		   "struct DSU {",
		   "\tvector<T> parent;",
		   "\tvector<int> size;",
		   "\tint components;",
		   "\n\tDSU(int n) {",
		   "\t\tparent.resize(n+1);",
		   "\t\tfor(int i=0; i<n+1; i++) parent[i] = i;",
		   "\t\tsize.resize(n+1, 1);",
		   "\t\tcomponents = n;",
		   "\t}",
		   "\n\tT find(T x) {",
		   "\t\tif(parent[x] == x) return x;",
		   "\t\treturn parent[x] = find(parent[x]);",
		   "\t}",
		   "\n\tT getSize(T x) {",
		   "\t\treturn size[find(x)];",
		   "\t}",
		   "\n\tbool uni(T a, T b) {",
		   "\t\tT leaderA = find(a), leaderB = find(b);",
		   "\n\t\tif(leaderA == leaderB) {",
		   "\t\t\treturn false;",
		   "\t\t}",
		   "\n\t\tcomponents--;",
		   "\n\t\tif(size[leaderA] > size[leaderB]) swap(leaderA, leaderB);",
		   "\n\t\tparent[leaderA] = leaderB;",
		   "\t\tsize[leaderB] += size[leaderA];",
		   "\t\treturn true;",
		   "\t}",
		   "\n\tint getComponents() {",
		   "\t\treturn components;",
		   "\t}",
		   "\n\tbool same_set(T a, T b) {",
		   "\t\treturn find(a) == find(b);",
		   "\t}",
		   "};"
	   ],
	   "description": "Dijoint Set Union with components count template"
   },
   "Fast Binary Jump": {
	   "prefix": ["b-jump", "binary-lifting", "getJump"],
	   "body": [
		   "int jmp(int x, int d) {",
		   "\tfor(int j=LOG-1; j>=0; j--)",
		   "\t\tif(d & (1 << j)) x = up[x][j];",
		   "\treturn x;",
		   "}"
	   ],
	   "description": "implements binary jump function"
   },
   "Fast LCA": {
	   "prefix": "getLCA",
	   "body": [
		   "int get_lca(int a, int b) {",
		   "\tif(depth[a] < depth[b]) swap(a, b);",
		   "\n\ta = jmp(a, depth[a] - depth[b]);",
		   "\tif(a == b) return a;",
		   "\tfor(int j=LOG-1; j>=0; j--)",
		   "\t\tif(up[a][j] != up[b][j])",
		   "\t\t\ta = up[a][j], b = up[b][j];",
		   "\n\treturn up[a][0];",
		   "}",
	   ], 
	   "description": "implements lowest common ancestor"
   },
   "Fast Matrix Walking": {
	   "prefix": "getDirections",
	   "body": [
		   "int dr[4] = {0, -1, 0, 1};\nint dc[4] = {-1, 0, 1, 0};\nint n, m;"
	   ],
	   "description": "get dr and dc arrays"
   },
   "Fast Check": {
	   "prefix": "getCheck",
	   "body": [
		   "bool ok(int r, int c) {",
		   "\treturn (r >= 0 && r < n && c >= 0 && c < m && !vis[r][c] && mat[r][c] != \"#\");",
		   "}"
	   ],
	   "description": "implements OK function for matrix"
   },
   "Fast Reverse": {
	   "prefix": "vrev",
	   "body": "reverse(all(${0}));",
	   "description": "Reverse vector"
   },
   "Fast lower bound" : {
	   "prefix" : ["lower_bound", "lb"],
	   "body" : [
		   "lower_bound(all(${0}), );"
	   ],
	   "description": "Lower bound fast"
   },
   "Fast upper bound" : {
	   "prefix" : ["upper_bound", "ub"],
	   "body" : [
		   "upper_bound(all(${0}), );"
	   ],
	   "description": "Upper bound fast"
   },
   "Test Case": {
	   "prefix": ["getTest", "test_case"],
	   "body": [
		   "int t = 1;",
		   "cin >> t;",
		   "\nwhile(t--)",
		   "\tsolve();"
	   ]
   },
   "Basic Template": {
	   "prefix": "cpplight",
	   "body": [
		   "#include <bits/stdc++.h>",
		   "using namespace std;",
		   "using ll = long long;",
		   "\nint main() {",
		   "\n\t//code starts here",
		   "\n\treturn 0;",
		   "}"
	   ],
	   "description": "Only bits"
   },
   "Fast fill": {
	   "prefix": "fill",
	   "body": [
		   "fill(all(${0}), );"
	   ]
   },
   "Fast GNU Ordered Set": {
	   "prefix": ["ordered-set"],
	   "body": [
		   "#include <ext/pb_ds/assoc_container.hpp>",
		   "using namespace __gnu_pbds;",
		   "template <class T>\nusing Tree = \ntree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;",
	   ]
   },
   "Fast File I/O": {
	   "prefix" : "getUSA",
	   "body" : [
		   "void setUSA(string name) {",
		   "\tfreopen( (name + \".in\").c_str(), \"r\", stdin);",
		   "\tfreopen( (name + \".out\").c_str(), \"w\", stdout);",
		   "}",
	   ]
   },
   "Fast Signed Area Of 3 Points": {
	   "prefix": "convexarea",
	   "body": [
		   "ll area(pii a, pii b, pii c) {",
		   "\tll d1 = (b.first - a.first) * (c.second - a.second);",
		   "\tll d2 = (b.second - a.second) * (c.first - a.first);",
		   "\treturn d1 - d2;",
		   "}",
	   ]
   },
   "Fast CHT": {
	   "prefix": "getCHT",
	   "body": [
		   "struct CHT {",
		   "\tstruct Line {",
		   "\t\tll a, b;",
		   "\t\tLine(ll x, ll y): a(x), b(y) {}",
		   "\n\t\tll val(ll x) {",
		   "\t\t\treturn a * x + b;",
		   "\t\t}",
		   "\n\t\tll intersect(Line y) {",
		   "\t\t\treturn (y.b - b + a - y.a) / (a - y.a);",
		   "\t\t}",
		   "\t};",
		   "\n\tdeque<pair<Line, ll> > q;",
		   "\n\tvoid insert(ll a, ll b) {",
		   "\t\tLine line(a, b);",
		   "\t\twhile(q.size() > 0 && q.back().second >= q.back().first.intersect(line))",
		   "\t\t\tq.pop_back();",
		   "\n\t\tif(q.empty()) {",
		   "\t\t\tq.push_back({ line, 0 });",
		   "\t\t\treturn ;",
		   "\t\t}",
		   "\n\t\tq.push_back({ line, q.back().first.intersect(line) });",
		   "\t}",
		   "\n\tll query(ll x) {",
		   "\t\twhile(q.size() > 1) {",
		   "\t\t\tif(q[1].second <= x) q.pop_front();",
		   "\t\t\telse break;",
		   "\t\t}",
		   "\n\t\treturn q.front().first.val(x);",
		   "\t}",
		   "};"
	   ]
   }
}